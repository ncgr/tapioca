#! /usr/bin/env perl

# Tapioca
# Copyright (C) 2013 National Center for Genome Resources - http://ncgr.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use Getopt::Long;
use File::Which;

my $_I_AM    = 'tap_contam_analysis';
my $_VERSION = '%BUNDLE_VERSION%';

sub _cigar_reverse;

my $dbname;
my $help_flag;
my $pct_cut   = 20;
my $verbosity = 0;
my $version_flag;

Getopt::Long::Configure( 'no_ignore_case', 'no_auto_abbrev' );
Getopt::Long::GetOptions(
    'db|d=s'     => \$dbname,
    'help|h'     => \$help_flag,
    'pct|p=f'    => \$pct_cut,
    'verbose|V+' => \$verbosity,
    'version|v'  => \$version_flag,
);

if ( $version_flag ) {
    print "$_I_AM $_VERSION\n";
    exit 0;
}

if ( $help_flag ) {
    print <<_TEXT;
Usage: $_I_AM [OPTIONS] <in1> ...
Identifies potentially contaminated reads in <in1>, ... by comparison with 
a set of known contaminant sequences, based on Bowtie2 alignment.
Options:
 -d, --db <dbname>
       Specify <dbname> as a Bowtie2 database of contaminants.
 -h, --help
       Print this message and exit; specify --verbose for more.
 -p, --pct <pct>
       Identify a read as contaminated if its Bowtie2 score is at least <pct>
       percent of the maximum possible [default: 20]. In local-alignment mode
       (used by $_I_AM) Bowtie2 assigns an award of two for each
       correctly matching base in an alignment, thus the maximum score would
       be twice the length of the read.  When only part of the read matches
       the target, or the target is shorter than the read, lower scores will
       be reported.
 -V, --verbose
       Increase the level of verbosity; multiples increase output.
 -v, --version
       Print the version information and exit.
_TEXT

    exit 0;
}

### Check for bowtie2 binary
if (which('bowtie2') eq '') { die("[ERROR]: $_I_AM: bowtie2 is missing from your path")};

### Process each input file with Bowtie2 against the contaminant database

my %bad_ids;

# Set the Bowtie2 score-min option based on pct_cut
my $score_min_str = sprintf( "\"L,0,%0.2f\"", 2 * $pct_cut / 100 );

foreach my $infile ( @ARGV ) {

    next if !-r $infile;

    open IN, "bowtie2 --threads 2 --quiet -x $dbname -U $infile --local -k 1 --score-min \"$score_min_str\" |";
    print STDERR "bowtie2 --threads 2 --quiet -x $dbname -U $infile --local -k 1 --score-min \"$score_min_str\"\n"
      if $verbosity > 0;

    while ( <IN> ) {
        chomp;
        next if /^\s*$/;
        next if /^\s*[\@\#]/;
        my @vals = split( /\t/, $_ );
        next if $vals[2] eq '*';

        my $rname = $vals[2];
        my $pos   = $vals[3];
        my $cigar = 0x10 & $vals[1] ? _cigar_reverse( $vals[5] ) : $vals[5];    # reverse if hit was revcom

        #print join( "\t", $vals[0], $vals[2] ) . "\n";
        $bad_ids{ $vals[0] } = [ $rname, $pos, $cigar ];
    }

    close IN;
}

print sprintf( "### tap_contam_analysis report\n" );
print sprintf( "### version %s\n",             $_VERSION );
print sprintf( "### bowtie2_db %s\n",          $dbname );
print sprintf( "### bowtie2_search_opts %s\n", "--local -k 1 --score-min \"$score_min_str\"" );
print sprintf( "### pct_cut %0.2f\n",          $pct_cut );

foreach my $infile ( @ARGV ) {
    print sprintf( "### searched %s\n", $infile );
}

my %sums;
foreach my $id ( keys %bad_ids ) {
    $sums{ $bad_ids{ $id }->[0] } += 1;
}

foreach my $id ( sort { $sums{ $b } <=> $sums{ $a } } keys %sums ) {
    print sprintf( "### found %s\t%d\n", $id, $sums{ $id } );
}

foreach my $id ( keys %bad_ids ) {
    print join( "\t", $id, @{ $bad_ids{ $id } } ) . "\n";
}

exit 0;

# Reverse a CIGAR string

sub _cigar_reverse {
    my $str = shift;

    $str =~ s/^\s+//g;
    $str =~ s/\s+$//g;
    my @vals = $str =~ m/(\d+[\D=])/gs;

    return join( '', reverse @vals );
}
